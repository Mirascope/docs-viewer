/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LlmsFullImport } from './routes/llms-full'
import { Route as R404Import } from './routes/404'
import { Route as CatchallImport } from './routes/$catchall'
import { Route as IndexImport } from './routes/index'
import { Route as DocsIndexImport } from './routes/docs.index'
import { Route as DocsSplatImport } from './routes/docs.$'
import { Route as DocsProductLlmsFullImport } from './routes/docs.$product.llms-full'

// Create/Update Routes

const LlmsFullRoute = LlmsFullImport.update({
  id: '/llms-full',
  path: '/llms-full',
  getParentRoute: () => rootRoute,
} as any)

const R404Route = R404Import.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const CatchallRoute = CatchallImport.update({
  id: '/$catchall',
  path: '/$catchall',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRoute,
} as any)

const DocsSplatRoute = DocsSplatImport.update({
  id: '/docs/$',
  path: '/docs/$',
  getParentRoute: () => rootRoute,
} as any)

const DocsProductLlmsFullRoute = DocsProductLlmsFullImport.update({
  id: '/docs/$product/llms-full',
  path: '/docs/$product/llms-full',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$catchall': {
      id: '/$catchall'
      path: '/$catchall'
      fullPath: '/$catchall'
      preLoaderRoute: typeof CatchallImport
      parentRoute: typeof rootRoute
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404Import
      parentRoute: typeof rootRoute
    }
    '/llms-full': {
      id: '/llms-full'
      path: '/llms-full'
      fullPath: '/llms-full'
      preLoaderRoute: typeof LlmsFullImport
      parentRoute: typeof rootRoute
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/docs/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$product/llms-full': {
      id: '/docs/$product/llms-full'
      path: '/docs/$product/llms-full'
      fullPath: '/docs/$product/llms-full'
      preLoaderRoute: typeof DocsProductLlmsFullImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$catchall': typeof CatchallRoute
  '/404': typeof R404Route
  '/llms-full': typeof LlmsFullRoute
  '/docs/$': typeof DocsSplatRoute
  '/docs': typeof DocsIndexRoute
  '/docs/$product/llms-full': typeof DocsProductLlmsFullRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$catchall': typeof CatchallRoute
  '/404': typeof R404Route
  '/llms-full': typeof LlmsFullRoute
  '/docs/$': typeof DocsSplatRoute
  '/docs': typeof DocsIndexRoute
  '/docs/$product/llms-full': typeof DocsProductLlmsFullRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$catchall': typeof CatchallRoute
  '/404': typeof R404Route
  '/llms-full': typeof LlmsFullRoute
  '/docs/$': typeof DocsSplatRoute
  '/docs/': typeof DocsIndexRoute
  '/docs/$product/llms-full': typeof DocsProductLlmsFullRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$catchall'
    | '/404'
    | '/llms-full'
    | '/docs/$'
    | '/docs'
    | '/docs/$product/llms-full'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$catchall'
    | '/404'
    | '/llms-full'
    | '/docs/$'
    | '/docs'
    | '/docs/$product/llms-full'
  id:
    | '__root__'
    | '/'
    | '/$catchall'
    | '/404'
    | '/llms-full'
    | '/docs/$'
    | '/docs/'
    | '/docs/$product/llms-full'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CatchallRoute: typeof CatchallRoute
  R404Route: typeof R404Route
  LlmsFullRoute: typeof LlmsFullRoute
  DocsSplatRoute: typeof DocsSplatRoute
  DocsIndexRoute: typeof DocsIndexRoute
  DocsProductLlmsFullRoute: typeof DocsProductLlmsFullRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CatchallRoute: CatchallRoute,
  R404Route: R404Route,
  LlmsFullRoute: LlmsFullRoute,
  DocsSplatRoute: DocsSplatRoute,
  DocsIndexRoute: DocsIndexRoute,
  DocsProductLlmsFullRoute: DocsProductLlmsFullRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$catchall",
        "/404",
        "/llms-full",
        "/docs/$",
        "/docs/",
        "/docs/$product/llms-full"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$catchall": {
      "filePath": "$catchall.tsx"
    },
    "/404": {
      "filePath": "404.tsx"
    },
    "/llms-full": {
      "filePath": "llms-full.tsx"
    },
    "/docs/$": {
      "filePath": "docs.$.tsx"
    },
    "/docs/": {
      "filePath": "docs.index.tsx"
    },
    "/docs/$product/llms-full": {
      "filePath": "docs.$product.llms-full.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
